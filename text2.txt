<template>
  <div>
    <div class="container">
      <div class="general-exam-test">
        <div class="title">
          <div class="exam-level"></div>
          <div class="sub-name">
            <h4>??? ?????????</h4>
            <img src="../../assets/imgs/noun_testing_3325786.png" alt />
          </div>
        </div>

        <!-- <Loading v-if="isLoading" /> -->

        <vs-tabs>
          <vs-tab label="????? ??? ???????">
            <div style="min-height:200px;">
              <!-- {{questions}} -->
              <!-- <form action @submit.prevent> -->
              <div class="form-group mt-2">
                <input
                  type="text"
                  class="form-control"
                  style="padding:5px;"
                  placeholder="??? ???? ?????? ..."
                  @keypress.enter="searchQuestions"
                  v-model="searchInAllQuestions"
                />
              </div>
              <Loading v-if="isLoading" />
              <div class="empty-questions" v-else-if="bankInfoQuestions.length == 0">
                <img src="@/assets/imgs/undraw_searching_p5ux.svg" alt />
                <h4 class="no-questions">?????? ????? ??????</h4>
              </div>
              <div v-else class="general-exam-content">
                <Loading v-if="this.isSearching"></Loading>
                <div v-else class="row">
                  <div class="col-md-12" v-for="ques in bankInfoQuestions" :key="ques.id">
                    <QuestionsBankCard :question="ques" >
                          <button class="btn btn-danger" slot="delete" @click="deleteSpecificQuestion(ques)"> ??? </button>

                    </QuestionsBankCard>
                  </div>
                  <div
                    v-if="bankInfoQuestions.length > 0 && totalpages > 1"
                    style=" position: absolute;bottom: 0;left: 50%;transform: translate(-50%);direction:ltr"
                  >
                    <div>
                      <vs-pagination :total="totalpages" v-model="currentPage"></vs-pagination>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </vs-tab>

          <vs-tab label="????? ?????">
            <div>
              <!-- {{questions}} -->
              <!-- <form action @submit.prevent> -->
              <Loading v-if="isLoading" />

              <div class="general-exam-content" v-else>
                <div class="row">
                  <div
                    v-for="(ques, index) in questions"
                    :key="index"
                    class="col-md-12 question-bannar"
                    style="min-height: 200px;padding: 23px 10px;border: 1px dashed #d2d2d2;margin-bottom: 30px;"
                  >
                    <div>
                      <div class="exam-cont-item">
                        <div class="questionHead" style="position: relative;">
                          <!-- {{ques.modelAnswer}} -->
                          <div class="row">
                            <div class="col-md-1 col-2">
                              <h6>{{ index + 1 }}</h6>
                              <!-- {{ques.type}} -->
                            </div>

                            <!-- <div class="col-md-5">
                              <v-select
                                style="width:100%"
                                v-model="ques.level"
                                :options="questionLevelOptions"
                                label="name"
                              ></v-select>
                            </div>-->

                            <div class="col-md-5">
                              <div class="question-type-res" style="margin-top:12px">
                                <span style="font-weight:bold;color: #058ac6;">??? ?????? /</span>
                                <span style="color: #058ac6;">
                                  {{
                                  ques.typeName
                                  }}
                                </span>
                              </div>
                            </div>
                          </div>
                          <div class="delete-red-icon">
                            <i
                              style="background: rgb(241, 75, 75);font-size: 19px;cursor: pointer;color: #FFF;border-radius: 5px"
                              @click="questions.splice(index, 1)"
                              class="deleteicon fas fa-trash-alt"
                            ></i>
                          </div>
                        </div>
                      </div>
                    </div>
                    <transition
                      mode="out-in"
                      enter-active-class="animate__animated animate__flipInX"
                    >
                      <component
                        :index="index"
                        :type="1"
                        :is="ques.type"
                        :question="ques"
                        @set-answer="setModalAnswer"
                        @set-question-head="updateQuestionHead"
                      >

                      </component>
                    </transition>
                  </div>
                </div>
              </div>
              <div class="questionHead head-bar row mb-5">
                <div class="determine-ques">
                  <h6>??? ??????</h6>
                </div>
                <div class="col-md-5">
                  <v-select v-model="questionType" label="name" :options="questionTypeOptions"></v-select>
                </div>
                <!-- <div class="col-md-5">
                  <v-select v-model="questionLevel" label="name" :options="questionLevelOptions"></v-select>
                </div>-->
                <div class="fixed-icon">
                  <i
                    style="color: rgb(255, 255, 255);font-size: 19px;cursor: pointer;background: #058ac6;border-radius: 5px"
                    @click="addNewQuestion()"
                    class="addicon div-icon fas fa-plus"
                  ></i>
                </div>
              </div>

              <div class="col-md-12" v-if="questions.length>0">
                <!-- @click="addQuestionsToNextTab" -->
                <input
                  type="button"
                  @click="addQuestions"
                  value="????? ???????"
                  class="basth-btn-primary"
                />
              </div>
            </div>
          </vs-tab>
          <vs-tab label="????? ????">
            <div style="min-height:200px;">
              <div class="questionHead head-bar row mb-5">
                <div class="determine-ques">
                  <h6>??? ??????</h6>
                </div>
                <div class="col-md-5">
                  <v-select
                    v-model="questionSelectedType"
                    @input="createQuestion"
                    label="name"
                    :options="questionTypeOptions"
                  ></v-select>
                </div>

                <!-- <div class="fixed-icon">
                  <i
                    style="color: rgb(255, 255, 255);font-size: 19px;cursor: pointer;background: #058ac6;border-radius: 5px"
                    @click="createQuestion()"
                    class="addicon div-icon fas fa-plus"
                  ></i>
                </div>-->
              </div>
              <!-- {{questions}} -->
              <!-- <form action @submit.prevent> -->
              <Loading v-if="isLoading" />

              <div class="general-exam-content" v-if="question &&!isLoading">
                <div class="row">
                  <div
                    class="col-md-12"
                    style="min-height: 200px;padding: 10px;border: 1px dashed #d2d2d2;margin-bottom: 30px;"
                  >
                    <div></div>
                    <transition
                      mode="out-in"
                      enter-active-class="animate__animated animate__flipInX"
                    >
                      <component
                        :index="1"
                        :type="2"
                        :is="question.type"
                        :question="question"
                        @set-answer="setModalAnswer"
                        @set-image="setQuestionImage"
                        @set-question-head="updateQuestionHead"
                      >

                      </component>
                    </transition>
                  </div>

                  <div class="col-md-12">
                    <input
                      type="button"
                      :disabled="question == null"
                      @click="addQuestion"
                      value="????? ??????"
                      class="basth-btn-primary"
                    />
                  </div>
                </div>
              </div>
            </div>
          </vs-tab>
        </vs-tabs>
      </div>
    </div>
  </div>
</template>

<script>
import truefalse from "../../components/questions/TrueOrFalse";
import choose from "../../components/questions/ChooseQusestions";
import paragraph from "../../components/questions/Paragraph";
import complete from "../../components/questions/completeQustions";
import DetermineLesson from "../../components/determine/determine";
import group from "../../components/questions/GroupHead";
import Loading from "../../components/Loading";
import QuestionsBankCard from "../../components/questions-bank/QuestionsBankCard";

export default {
  // middleware: "auth-teacher",
  middleware: "auth-admin-or-teacher",

  components: {
    truefalse,
    Loading,
    QuestionsBankCard,
    choose,
    paragraph,
    complete,
    DetermineLesson,
    group,
  },
  data() {
    return {
      searchInAllQuestions: "",
      totalpages: 0,
      currentPage: 1,
      groupQuestionId: 0,
      hover: true,
      isLoading: true,
      isSearching: false,
      path: null,
      question: null,
      questionAdded: [],
      bankInfoQuestions: [],
      groupQuestion: {
        type: "group",
        head: "",
        unit: "",
        subject: "",
        lesson: "",
        image: "",
        level: "",
        difficultyLevel: "",
        subQuestions: [],
      },
      questionLevel: "",
      // questionLevelOptions: [
      //   { name: "???", value: "easy" },
      //   { name: "?????", value: "middle" },
      //   { name: "???", value: "difficult" }
      // ],
      questionType: "",
      questionSelectedType: "",
      questionTypeOptions: [
        { name: "?? ? ???", value: "truefalse" },
        { name: "???????", value: "choose" },
      ],
      content: "",
      editorOption: {},

      completeQustion: [{ num: 1 }],

      answer: ["", "", "", ""],
      selectedComponents: "ArticleQuestions",
      questions: [],
      getQData: [],
    };
  },

  created() {
    this.getBankInfoQuestions();
  },

  watch: {
    currentPage: function (val) {
      this.getBankInfoQuestions();
    },
  },

  methods: {

    
    deleteSpecificQuestion(question){
      console.log('delete this', question)

      // questions/16

      this.$snotify.confirm("?? ???? ???  ??????  ??????? ", " ?? ??? ?????", {
        showProgressBar: true,
        closeOnClick: true,
        pauseOnHover: true,
        buttons: [
          {
            text: "?????",
            action: (toast) => {
                    this.isLoading = true

              this.$snotify.remove(toast.id);
              this.$axios
                .delete(`information-bank/questions/${question.id}`)
                .then((res) => {
                  console.log(res)
                  let questionIndexToDelete = this.bankInfoQuestions.findIndex(obj => obj.id == question.id)
                  this.bankInfoQuestions.splice(questionIndexToDelete, 1)
                            
                  this.$snotify.success(" ?? ????? ?????");
                })
                .catch((err) => {
                  this.$snotify.error("????? ??? ??? ??  ");
                }).finally(() => this.isLoading = false);
            },
          },
          {
            text: "?????",
            action: (toast) => {
              this.$snotify.remove(toast.id);
            },
          },
        ],
      });
    },


    getBankInfoQuestions() {
      this.$axios
        .get(`information-bank/questions?page=${this.currentPage}`)
        .then((res) => {
          console.log(res);
          this.bankInfoQuestions = res.data.docs;
          this.totalpages = res.data.totalPages;
        })
        .finally(() => (this.isLoading = false));
    },
    searchQuestions() {
      this.isSearching = true;

      this.$axios
        .get(`information-bank/questions?head=${this.searchInAllQuestions}`)
        .then((res) => {
          this.allQuestions = res.data.docs;
          this.totalpages = res.data.totalPages;
          this.totalPages;
          console.log(res);
        })
        .finally(() => (this.isSearching = false));
    },

    setModalAnswer(e) {
      //   console.log("data", e);
      if (e.type == 1) {
        this.questions[e.index].modelAnswer = e.answer;
        if (e.answer.length > 0) {
          this.questions[e.index].numberOfInputs = e.answer.length;
        }
      } else if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].modelAnswer = e.answer;
      } else {
        this.question.modelAnswer = e.answer;
      }
    },

    updateQuestionHead(e) {
      //   console.log("data", e);
      if (e.type == 1) {
        this.questions[e.index].head = e.head;
      } else if (e.type == 3) {
        this.groupQuestion.head = e.head;
      } else if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].head = e.head;
      } else {
        this.question.head = e.head;
      }
    },

    setQuestionImage(e) {
      // alert("d");
      // console.log("image", e.image);
      if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].image = e.image;
      } else if (e.type == 2) {
        if (this.question != null) {
          this.question.image = e.image;
        }
      } else {
        this.groupQuestion.image = e.image;
      }
    },
    addQuestions() {
      // questions-all
      this.isLoading = true;
      this.$axios
        .post(`information-bank/questions-all`, this.questions)
        .then((res) => {
          // console.log("questions", res.data);
          this.$snotify.success(`?? ????? ???????  ?????`);
          this.questions = [];

          this.getBankInfoQuestions();
          // this.$router.push({ path: '/subjects' })
        })
        .catch((err) => {
          // this.isLoading = false
          console.log(err);
        })
        .finally(() => (this.isLoading = false));
    },
    addQuestion() {
      // Add questions using form data

      let questionForm = new FormData();
      questionForm.append("head", this.question.head);
      questionForm.append("modelAnswer", this.question.modelAnswer);

      questionForm.append("type", this.question.type);

      if (this.question.choices) {
         for (let index = 0; index < this.question.choices.length; index++) {
          questionForm.append(`choices[${index}]`, this.question.choices[index]);
        }
      }

      if (this.question.image != null) {
        questionForm.append("image", this.question.image);
      }
      this.isLoading = true;
      console.log(this.question);
      this.$axios
        .post(`information-bank/questions`, questionForm, {
          headers: { "Content-Type": "multipart/form-data" },
        })
        .then((res) => {
          this.question = null;
          console.log("specific Question ",res)
          this.bankInfoQuestions.unshift(res.data)
          this.$snotify.success(`?? ????? ??????  ?????`);
        })
        .catch((err) => {
          console.log(err);
        })
        .finally(() => (this.isLoading = false));
    },

    addQuestionToBankInfo() {
      this.isLoading = true;
      // console.log("added ", this.questionAdded);
      this.$axios
        .post(
          `information-bank/questions`,
          this.questionAdded
          // modelAnswer: this.getQData.modelAnswer,
          // head: this.getQData.head,
          // type: this.getQData.type,
          // image: this.getQData.image,
          // choices: this.getQData.choices,
        )
        .then((res) => {
          console.log(res);
          console.log(this.getQData);
          this.$snotify.success(`?? ????? ???????  ?????`);
        })
        .finally(() => (this.isLoading = false));
    },

    setModalAnswer(e) {
      //   console.log("data", e);
      if (e.type == 1) {
        this.questions[e.index].modelAnswer = e.answer;
        if (e.answer.length > 0) {
          this.questions[e.index].numberOfInputs = e.answer.length;
        }
      } else if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].modelAnswer = e.answer;
      } else {
        this.question.modelAnswer = e.answer;
      }
    },
    updateQuestionLevel() {
      this.question.difficultyLevel = this.question.level.value;
    },
    updateGroupQuestionLevel() {
      this.groupQuestion.difficultyLevel = this.groupQuestion.level.value;
    },
    updateQuestionHead(e) {
      //   console.log("data", e);
      if (e.type == 1) {
        this.questions[e.index].head = e.head;
      } else if (e.type == 3) {
        this.groupQuestion.head = e.head;
      } else if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].head = e.head;
      } else {
        this.question.head = e.head;
      }
    },

    addNewQuestion() {
      if (this.questionType.value != "") {
        // console.log(this.questionLevel.value);
        if (this.questionType.value == "truefalse") {
          this.questions.push({
            // subject: this.path.subject,
            // unit: this.path.unit,
            // lesson: this.path.lesson,
            type: this.questionType.value,
            typeName: this.questionType.name,
            head: "",
            // difficultyLevel: this.questionLevel.value,
            // level: this.questionLevel,
            modelAnswer: "",
          });
        } else if (this.questionType.value == "choose") {
          this.questions.push({
            // subject: this.path.subject,
            // unit: this.path.unit,
            // lesson: this.path.lesson,
            type: this.questionType.value,
            typeName: this.questionType.name,
            head: "",
            // difficultyLevel: this.questionLevel.value,
            // level: this.questionLevel,
            modelAnswer: 0,
            choices: ["", "", "", ""],
          });
        }
      }
    },

    setQuestionImage(e) {
      // alert("d");
      // console.log("image", e.image);
      if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].image = e.image;
      } else if (e.type == 2) {
        if (this.question != null) {
          this.question.image = e.image;
        }
      } else {
        this.groupQuestion.image = e.image;
      }
    },
    createQuestion() {
      if (this.questionSelectedType == null) {
        this.question = null;
        return;
      }
      if (
        this.questionLevel.value != "" &&
        this.questionSelectedType.value != ""
      ) {
        // console.log(this.questionLevel.value);
        if (this.questionSelectedType.value == "truefalse") {
          this.question = {
            // subject: this.path.subject,
            // unit: this.path.unit,
            // lesson: this.path.lesson,
            type: this.questionSelectedType.value,
            typeName: this.questionSelectedType.name,
            head: "",
            // difficultyLevel: this.questionLevel.value,
            // level: this.questionLevel,
            modelAnswer: "",
            image: null,
          };
        } else if (this.questionSelectedType.value == "choose") {
          this.question = {
            // subject: this.path.subject,
            // unit: this.path.unit,
            // lesson: this.path.lesson,
            type: this.questionSelectedType.value,
            typeName: this.questionSelectedType.name,
            head: "",
            // difficultyLevel: this.questionLevel.value,
            // level: this.questionLevel,
            modelAnswer: 0,
            choices: ["", "", "", ""],
            image: null,
          };
        }
      }
    },
    playAudio: function () {
      document.getElementById("player").play();
    },
    pauseAudio: function () {
      document.getElementById("player").pause();
    },
    increaseVolume: function () {
      document.getElementById("player").volume += 0.1;
    },
    decreaseVolume: function () {
      document.getElementById("player").volume -= 0.1;
    },
  },
};
</script>

<style lang="scss">
.fill-the-ques {
  span {
    width: 100%;
  }
}
.general-exam-test {
  font-family: "CustomFontBold";
  .deleteicon,
  .addicon {
    opacity: 0.5;
    &:hover {
      opacity: 1;
    }
  }
  .vs-collapse-item:last-child {
    background: #f2f2f2;
    position: relative;
    padding: 15px;
    &::after {
      background: linear-gradient(
        90deg,
        #003150 20%,
        #27ae60 0,
        #27ae60 40%,
        #d35400 0,
        #d35400 60%,
        #8e44ad 0,
        #8e44ad 80%,
        #c0392b 0
      );
      position: absolute;
      content: "";
      height: 6px;
      right: 0;
      left: 0;
      bottom: -3px;
    }
  }
  .general-exam-content {
    padding: 10px;
  }
  .vs-collapse-item--header,
  .vs-collapse-item--icon-header {
    color: #058ac6;
    padding: 0;
  }
  .determine-collapse {
    .container {
      padding: 0;
    }
  }
  .determine-head {
    color: #058ac6;
    overflow: hidden;
    h5 {
      color: #058ac6;
      margin: 0;
      padding: 0;
      display: block;
      float: right;
      margin-top: 5px;
    }
    i {
      font-size: 32px;
      float: right;
      margin-left: 15px;
    }
  }
  input[type="submit"] {
    display: block;
    width: 36%;
    text-align: center;
    margin: 36px auto;
    padding: 9px;
    background: #058ac6;
    font-family: "CustomFontBold";
    color: #fff;
    border: 0;
    border-radius: 5px;
  }
  .audio-div {
    overflow: hidden;
    .audio-icon {
      display: block;
      width: 15%;
      float: right;
      text-align: center;
    }
    audio {
      display: block;
      width: 85%;
      float: left;
    }
  }
  .absthalk-radio {
    -webkit-appearance: none;
    width: 10px;
    display: block;
    height: 10px;
    /* background: #DDD; */
    padding: 15px 15px;
    border: 2px dotted #e3e3e3;
    outline: 0;
    position: relative;
    border-radius: 8px;
    float: right;
    &:checked {
      border: 2px dotted #058ac6;
      &::after {
        background-image: url("../../assets/imgs/check.png");
        position: absolute;
        content: "";
        width: 65%;
        height: 60%;
        top: 4px;
        left: 6px;
        background-size: cover;
      }
    }
  }
  margin-top: 50px;
  .title {
    overflow: hidden;
    margin-bottom: 5px;
    .sub-name {
      h4 {
        display: block;
        font-size: 34px;
        margin-right: 12px;
        font-family: "CustomFontMedium";
        margin-bottom: 0;
        width: 92%;
        float: left;
        color: #058ac6;
      }
      img {
        display: block;
        width: 31px;
        float: left;
      }
    }
    .sub-name,
    .exam-level {
      display: block;
      width: 50%;
      float: left;
      padding-top: 13px;
    }
    .exam-level {
      text-align: left;
      padding: 20px 0;
      img {
        display: inline-block;
        width: 40px;
        margin-left: 17px;
        margin-top: -21px;
      }
      h6 {
        display: inline-block;
      }
    }
  }

  .form-group {
    .form-control {
      background: #fff;
      border: 0;
      box-shadow: 0px 0px 10px 1px #ddd;
      border-radius: 10px;
      font-family: "CustomFontRegular";
      color: #333;
      font-size: 16px;
      padding: 26px 19px;
    }
  }
  .head-bar {
    background: #eee;
    position: relative;
    border-radius: 10px 6px 6px 10px;
    /* padding-right: 39px; */
    margin-top: 23px;
    margin: 14px 0 0 0;
    .determine-ques {
      border-radius: 0 6px 6px 0;
      background: #058ac6;
      color: #fff;
      padding: 0 12px;
      h6 {
        font-size: 13px;
        font-family: "CustomFontBold";
        padding: 10px 0;
        line-height: 30px;
        margin-bottom: 0;
      }
    }
    .v-select {
      margin-top: 6px;
      margin-bottom: 6px;
    }

    .div-icon {
      width: 60px;
      background: #058ac6;
      text-align: center;
      position: absolute;
      left: 0;
      top: 0;
      height: 99%;
      margin: auto;
      text-align: center;
      border-radius: 10px 0 0 10px;
      color: #fff;
      padding: 16px;
      transition: all 0.5s ease;
    }
    .vs__dropdown-toggle {
      background: #fff;
      border: 0;
      box-shadow: 0px 0px 10px 1px #ddd;
      border-radius: 6px;
      font-family: "CustomFontRegular";
      color: #333;
      font-size: 16px;
      padding: 5px;
    }
  }
  .vs-tabs--btn {
    outline: none;
  }
  .con-vs-tabs.vs-tabs {
    position: relative;
  }
  .question-bannar {
    position: relative;
    &::after {
      background: linear-gradient(
        90deg,
        #003150 20%,
        #27ae60 0,
        #27ae60 40%,
        #d35400 0,
        #d35400 60%,
        #8e44ad 0,
        #8e44ad 80%,
        #c0392b 0
      );
      position: absolute;
      content: "";
      height: 6px;
      right: 0;
      left: 0;
      top: -1px;
      width: 100%;
    }
  }
  .general-exam-content {
    .exam-cont-item {
      .questionHead {
        i {
          width: 60px;
          background: rgb(241, 75, 75);
          text-align: center;
          position: absolute;
          left: 0;
          top: 0;
          height: 99%;
          margin: auto;
          text-align: center;
          border-radius: 10px 0 0 10px;
          color: #fff;
          padding: 16px;
          transition: all 0.5s ease;
        }
        background: #f2f2f2;
        border-radius: 9px 0 0 9px;
        margin-bottom: 23px;
        .v-select {
          width: 47%;
          float: right;
          margin-top: 9px;
          .vs__clear {
            fill: rgb(5, 138, 198);
            padding: 0;
            border: 0;
            background-color: transparent;
            cursor: pointer;
            margin-right: 8px;
            margin-left: 4px;
            margin-top: -4px;
          }

          .vs__open-indicator {
            fill: rgb(5, 138, 198);
            transform: scale(1);
            transition: transform 0.15s cubic-bezier(1, -0.115, 0.975, 0.855);
            transition-timing-function: cubic-bezier(1, -0.115, 0.975, 0.855);
          }

          .vs__dropdown-toggle {
            margin: 0 4px;
            /* padding: 24px 11px; */
            box-shadow: 0px 1px 10px 1px #efefef;
            border: 0;
            /* border-radius: 7px; */
            background: #f7f7f7;
          }
        }
      }
      > div {
        float: right;

        &:first-of-type {
          width: 9%;

          h6 {
            color: #ddd;
            background-color: #058ac6;
            padding: 15px;
            text-align: center;
            border-radius: 0 6px 6px 0;
            margin-bottom: 0;
          }
        }
        &:last-of-type {
          width: 100%;
          background: #f2f2f2;
          border-radius: 9px 0 0 9px;
          margin-bottom: 23px;
        }
      }
    }
  }
}
.question-bank-card {
  width: 100%;
  position: relative;
  margin: 10px;
  border: 2px dashed #d2d2d2;
  padding: 10px;
  margin-bottom: 15px;
  .solve-img {
    position: absolute;
    bottom: 0;
    left: 7px;
  }
  h6 {
    font-family: "CustomFontRegular";
  }
  h5 {
    font-size: 14px;
    font-weight: bolder;
    color: #058ac6;
    font-family: "CustomFontBold";
  }
  h5,
  h6 {
    display: inline-block;
  }
}

// Extra small devices (portrait phones, less than 576px)
@media (max-width: 575.98px) {
  .general-exam-test .title .sub-name h4 {
    display: block;
    font-size: 31px;
    margin-right: 8px;
    font-family: "CustomFontMedium";
    margin-bottom: 10px;
    width: 73%;
    float: left;
    color: #058ac6;
  }
  .exam-cont-item {
    margin: 28px 0 !important;
  }
  .questionHead {
    margin-bottom: 0 !important;
  }
  .delete-red-icon {
    margin-bottom: 27px;
  }
  .question-type-res {
    margin: 20px auto;
  }
  .fixed-icon {
    width: 100%;
  }
  .general-exam-test
    .general-exam-content
    .exam-cont-item
    .questionHead
    .v-select {
    width: 75%;
    float: right;
  }
  .general-exam-test .general-exam-head > div:last-of-type h4 {
    width: 13%;
    margin-bottom: 16px;
    font-size: 17px;
  }
  .unit h6 {
    font-size: 13px;
  }
  .fill-the-ques {
    font-size: 10px !important;
  }
  .general-exam-test .general-exam-head > div:last-of-type {
    width: 100%;
  }
  .general-exam-test .general-exam-head > div:first-of-type {
    margin-bottom: 18px;
  }

  .general-exam-test {
    padding-top: 60px;
  }

  .deleteicon,
  .addicon {
    position: static !important;
    width: 100% !important;
  }
}

// Small devices (landscape phones, 576px and up)
@media (min-width: 576px) and (max-width: 767.98px) {
  .general-exam-test {
    padding-top: 60px;
  }
}

// Medium devices (tablets, 768px and up)
@media (min-width: 768px) and (max-width: 991.98px) {
}

// Large devices (desktops, 992px and up)
@media (min-width: 992px) and (max-width: 1199.98px) {
}

// Extra large devices (large desktops, 1200px and up)
@media (min-width: 1200px) {
}

.editor {
  clear: both;
  border: 1px solid #eee;
  padding: 0;
  .menubar {
    padding: 10px;
    background: #333;
  }
  .editor__content {
    padding: 4px 29px;
  }
}
.vs-collapse.default {
  padding: 0;
  margin-bottom: 19px;
}
.determine-collapse {
  margin-top: 50px;
  .icon-header.vs-collapse-item--icon-header {
    left: 23px !important;
    right: auto;
    border: none;
    i {
      font-size: 29px;
      color: #fff;
    }
  }
  h5 {
    font-family: "CustomFontMedium";
    color: #058ac6;
    padding: 10px 12px;
  }

  .determine-subject {
    padding-top: 13px !important;
    margin-top: 14px;
    .card-cont {
      border: 2px dashed #ddd;
      margin-top: 0;
      padding: 50px 17px;
    }
    padding-top: 80px;

    input[type="text"],
    input[type="password"],
    input[type="email"],
    .vs--searchable .vs__dropdown-toggle {
      padding: 24px 11px;
      box-shadow: 0px 1px 10px 1px #ddd;
      border: 0;
      border-radius: 7px;
      margin-top: 10px;
      margin-bottom: 21px;
    }
    .vs--searchable .vs__dropdown-toggle {
      padding: 8px;
      font-family: "CustomFontRegular";
    }

    input[type="submit"].fullWidthBtn {
      display: block;
      width: 100%;
      text-align: center;
      padding: 13px;
      border-radius: 6px;
      border: 0;
      color: #fff;
      background-color: #058ac6;
      font-family: "CustomFontRegular";
    }
    h6 {
      font-family: "CustomFontMedium";
    }
  }
}
</style>
