<template>
  <div>
    <div class="container">
      <div class="tests-level">
        <div class="title">
          <h3 style="display:inline-block">
            <img src="@/assets/imgs/noun_exam_-1.png" alt />
            ???????? ?????
          </h3>
          <div style="float:left" v-if="selectedExam">
            <button class="btn btn-success" @click="selectedExam = null">??? ?????????</button>
          </div>
        </div>
        <Loading v-if="isLoading" />
        <div class="levels" v-else-if="!isLoading && selectedExam == null">
          <div class="row" v-if="exams.length > 0">
            <!-- {{exams[0].id}} -->
            <div class="col-md-4">
              <!-- <nuxt-link :to="'/exams/' + exams[0].id + '/questions'"> -->
              <div class="level-item box-shadow-class" @click="selectedExam = exams[0]">
                <img style="margin-top:40px" src="../../../assets/imgs/easy-level-1.png" alt />
                <h6>??????? ?????</h6>
              </div>
              <!-- </nuxt-link> -->
            </div>

            <div class="col-md-4">
              <!-- <nuxt-link :to="'/exams/' + exams[1].id + '/questions'"> -->
              <div class="level-item box-shadow-class" @click="selectedExam = exams[1]">
                <img style="margin-top:40px" src="../../../assets/imgs/easy-level-2.png" alt />
                <h6>??????? ???????</h6>
              </div>
              <!-- </nuxt-link> -->
            </div>

            <div class="col-md-4">
              <!-- <nuxt-link :to="'/exams/' + exams[2].id + '/questions'"> -->
              <div class="level-item box-shadow-class" @click="selectedExam = exams[2]">
                <img style="margin-top:40px" src="../../../assets/imgs/easy-level-3.png" alt />
                <h6>??????? ?????</h6>
              </div>
              <!-- </nuxt-link> -->
            </div>
          </div>
        </div>
        <div class="exam-details" v-if="selectedExam">
          <br />
          <!--  <hr />
          {{selectedExam.id}}
          <hr />
          {{ selectedExam.unit.subject}}
          <hr />
          {{ selectedExam.lesson.id}}
          <hr />-->
          <div class="exams-lesson-tabs">
            <vs-button
              :style="{
                outline: 'none',
                color: tabIndex == 0 ? 'blue' : '',
                'border-color': tabIndex == 0 ? 'blue' : ''
              }"
              @click="tabIndex = 0"
              type="line"
            >??????? ???????</vs-button>
            <vs-button
              :style="{
                outline: 'none',
                color: tabIndex == 1 ? 'blue' : '',
                'border-color': tabIndex == 1 ? 'blue' : ''
              }"
              @click="tabIndex = 1"
              type="line"
            >??? ???????</vs-button>
            <vs-button
              :style="{
                outline: 'none',
                color: tabIndex == 2 ? 'blue' : '',
                'border-color': tabIndex == 2 ? 'blue' : ''
              }"
              @click="tabIndex = 2"
              type="line"
            >??????? ???????? ????</vs-button>
            <vs-button
              :style="{
                outline: 'none',
                color: tabIndex == 3 ? 'blue' : '',
                'border-color': tabIndex == 3 ? 'blue' : ''
              }"
              @click="tabIndex = 3"
              type="line"
            >????? ????? ?????</vs-button>
            <div v-show="tabIndex == 0">
              <Loading v-if="isLoading" />
              <div v-else>
                <div class="row">
                  <div class="selectedExamQuestions">
                    <Loading v-if="isLoading"></Loading>
                    <div v-if="selectedExamQuestions.length == 0" class="empty-questions">
                      <img
                        style="width: 50%;"
                        src="../../../assets/imgs/undraw_searching_p5ux.svg"
                        alt
                      />
                      <h4
                        style="font-family:'CustomFontBold'"
                        class="no-questions"
                      >?????? ????? ??????</h4>
                    </div>
                    <div v-else class="questions-part" style="padding-bottom: 56px;">
                      <div
                        v-for="(ques, index) in selectedExamQuestions"
                        :key="index"
                        class="exam-question"
                      >
                        <QuestionsBankCard :key="ques.id" :question="ques">
                          <!-- <button
                          @click="editQuestionInExam(ques)"
                          slot="edit"
                          class="btn btn-primary"
                        >
                          <i class="fas fa-edit"></i> ?????
                        </button>
                        <button
                          @click="deleteQuestionInExam(ques)"
                          slot="delete"
                          class="btn btn-danger"
                        >
                          <i class="fas fa-trash"></i> ???
                          </button>-->
                          <!-- @click="examQuestions.push({ head:ques.head, type:ques.type, modelAnswer: ques.modelAnswer, by: ques.addedBy, dificulty:ques.difficultyLevel }), clickedToggle(index,$event)" -->
                                                    <button class="btn btn-danger" slot="delete" @click="deleteSpecificQuestion(ques)"> ??? </button>

                        </QuestionsBankCard>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div v-show="tabIndex == 1">
              <div>
                <vs-button
                  :style="{
                    outline: 'none',
                    color: innerTabIndex == 1 ? 'green' : '',
                    'border-color': innerTabIndex == 1 ? 'green' : ''
                  }"
                  line-origin="left"
                  type="line"
                  color="success"
                  @click="innerTabIndex = 1"
                >?? ?? ???</vs-button>
                <vs-button
                  :style="{
                    outline: 'none',
                    color: innerTabIndex == 2 ? 'green' : '',
                    'border-color': innerTabIndex == 2 ? 'green' : ''
                  }"
                  line-origin="left"
                  type="line"
                  color="success"
                  @click="innerTabIndex = 2"
                >?????????</vs-button>

                <div class="row" v-show="innerTabIndex == 1">
                  <div class="col-md-12">
                    <div class="form-group mt-2">
                      <input
                        type="text"
                        class="form-control"
                        style="padding:5px;"
                        placeholder="?????"
                        @keypress.enter="filterLessonTrueFasleQuestions"
                        v-model="searchTrueFalse"
                      />
                    </div>
                    <Loading v-if="isLoading"></Loading>

                    <div class="empty-questions" v-else-if="allQuestions.length == 0">
                      <img
                        style="width: 50%;"
                        src="../../../assets/imgs/undraw_searching_p5ux.svg"
                        alt
                      />
                      <h4
                        style="font-family:'CustomFontBold'"
                        class="no-questions"
                      >?????? ????? ??????</h4>
                    </div>
                    <div v-else class="questions-part" style="padding-bottom: 56px;">
                      <Loading v-if="isSearching"></Loading>

                      <div
                        v-else
                        v-for="(ques, index) in allQuestions"
                        :key="index"
                        class="exam-question"
                      >
                        <ParagraphCard @set-point="updatePoint" :key="ques.id" :question="ques">
                          <button
                            class="btn"
                            :class="
                              checkExist(ques) ? 'btn-danger' : 'btn-primary'
                            "
                            slot="add"
                            @click="addQuestions(ques)"
                          >{{ checkExist(ques) ? "???" : "?????" }}</button>

                          <button class="btn btn-danger" slot="delete" @click="deleteSpecificQuestionTruefalse(ques)"> ??? </button>

                        </ParagraphCard>
                      </div>
                    </div>

                    <div
                      v-if="allQuestions.length > 0 && totalpages > 1"
                      style="position: absolute;bottom: 0;left: 50%;transform: translate(-50%);direction:ltr"
                    >
                      <div>
                        <vs-pagination :total="totalpages" v-model="currentQuestionPage"></vs-pagination>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="row" v-show="innerTabIndex == 2">
                  <div class="col-md-12">
                    <div class="form-group mt-2">
                      <input
                        type="text"
                        class="form-control"
                        style="padding:5px;"
                        placeholder="?????"
                        @keypress.enter="filterLessonChooseQuestions"
                        v-model="searchChoose"
                      />
                    </div>
                    <Loading v-if="isLoading"></Loading>
                    <div class="empty-questions" v-else-if="allQuestions2.length == 0">
                      <img
                        style="width: 50%;"
                        src="../../../assets/imgs/undraw_searching_p5ux.svg"
                        alt
                      />
                      <h4
                        style="font-family:'CustomFontBold'"
                        class="no-questions"
                      >?????? ????? ??????</h4>
                    </div>
                    <div v-else class="questions-part" style="padding-bottom: 56px;">
                      <div
                        v-for="(ques, index) in allQuestions2"
                        :key="index"
                        class="exam-question"
                      >
                        <Loading v-if="isSearching"></Loading>

                        <QuestionsBankCard
                          v-else
                          :key="ques.id"
                          @set-point="updatePoint"
                          :question="ques"
                        >
                          {{ checkExist(ques) }}
                          <button
                            class="btn"
                            :class="
                              checkExist(ques) ? 'btn-danger' : 'btn-primary'
                            "
                            slot="add"
                            @click="addQuestions(ques)"
                          >{{ checkExist(ques) ? "???" : "?????" }}

                          </button>
                                                <button class="btn btn-danger" slot="delete" @click="deleteSpecificQuestionChoose(ques)"> ??? </button>


                          <!-- @click="examQuestions.push({ head:ques.head, type:ques.type, modelAnswer: ques.modelAnswer, by: ques.addedBy, dificulty:ques.difficultyLevel }), clickedToggle(index,$event)" -->
                        </QuestionsBankCard>
                        <!-- <ParagraphCard
                          v-else
                          @set-point="updatePoint"
                          :key="ques.id"
                          :question="ques"
                        >
                          <button
                            class="btn"
                            :class="
                              checkExist(ques) ? 'btn-danger' : 'btn-primary'
                            "
                            slot="add"
                            @click="addQuestions(ques)"
                          >
                            {{ checkExist(ques) ? "???" : "?????" }}
                          </button>
                        </ParagraphCard>-->
                      </div>
                    </div>

                    <div
                      v-if="allQuestions2.length > 0 && totalpages2 > 1"
                      style="position: absolute;bottom: 0;left: 50%;transform: translate(-50%);direction:ltr"
                    >
                        <vs-pagination :total="totalpages2" v-model="page2"></vs-pagination>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div v-show="tabIndex == 2">
              <div>
                <Loading v-if="isAdding" />
                <div class="exam-questions" v-else>
                  <div class="row">
                    <div class="col-md-12">
                      <div
                        v-for="(questionexam, index) in examQuestions"
                        :key="index"
                        class="exam-question"
                      >
                        <QuestionsBankCard
                          v-if="
                            questionexam.type != 'paragraph' &&
                              questionexam.type != 'group'
                          "
                          @set-point="updatePoint"
                          :question="questionexam"
                        >
                          <button
                            slot="add"
                            @click="removeExamQuestion(questionexam.id)"
                            class="btn btn-danger"
                          >
                            <i class="fas fa-trash"></i>
                          </button>
                        </QuestionsBankCard>
                      </div>
                      <button
                        v-if="examQuestions.length > 0"
                        class="btn btn-primary"
                        @click="addQuestionsToExam"
                      >????? ??????? ????????</button>
                      <!-- @click="addQuestionsToExam" -->
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div v-show="tabIndex == 3">
              <template>
                <Loading v-if="isLoading" />
                <div v-else>
                  <div class="container">
                    <div class="general-exam-test">
                      <div class="title">
                        <!-- <div class="exam-level"></div> -->
                        <div class="sub-name">
                          <h4>???????</h4>
                          <img src="@/assets/imgs/noun_testing_3325786.png" alt />
                        </div>
                      </div>

                      <vs-tabs v-if="path.lesson != null">
                        <vs-tab label="????? ?????">
                          <div>
                            <!-- {{questions}} -->
                            <!-- <form action @submit.prevent> -->
                            <div class="general-exam-content">
                              <div class="row">
                                <div
                                  v-for="(ques, index) in questions"
                                  :key="index"
                                  class="col-md-12 question-bannar"
                                  style="
                                min-height: 200px;
                                padding: 23px 10px;
                                border: 1px dashed #d2d2d2;
                                margin-bottom: 30px;
                              "
                                >
                                  <div>
                                    <div class="exam-cont-item">
                                      <div class="questionHead" style="position: relative;">
                                        <!-- {{ques.modelAnswer}} -->
                                        <div class="row">
                                          <div class="col-md-1 col-2">
                                            <h6>{{ index + 1 }}</h6>
                                            <!-- {{ques.type}} -->
                                          </div>

                                          <div class="col-md-5">
                                            <v-select
                                              style="width: 100%;"
                                              v-model="ques.level"
                                              :options="questionLevelOptions"
                                              label="name"
                                            ></v-select>
                                          </div>

                                          <div class="col-md-3">
                                            <div
                                              class="question-type-res"
                                              style="margin-top: 12px;"
                                            >
                                              <span
                                                style="
                                              font-weight: bold;
                                              color: #058ac6;
                                            "
                                              >??? ?????? /</span>
                                              <span style="color: #058ac6;">{{ ques.typeName }}</span>
                                            </div>
                                          </div>
                                          <div class="col-md-3">
                                            <div class="question-type-res" style="margin-top: 7px;">
                                              <span
                                                style="
                                              font-weight: bold;
                                              color: #058ac6;
                                            "
                                              >???? /</span>
                                              <input type="number" v-model="ques.point" />
                                            </div>
                                          </div>
                                        </div>
                                        <div class="delete-red-icon">
                                          <i
                                            style="
                                          background: rgb(241, 75, 75);
                                          font-size: 19px;
                                          cursor: pointer;
                                          color: #fff;
                                          border-radius: 5px;
                                        "
                                            @click="questions.splice(index, 1)"
                                            class="deleteicon fas fa-trash-alt"
                                          ></i>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <transition
                                    mode="out-in"
                                    enter-active-class="animate__animated animate__flipInX"
                                  >
                                    <component
                                      :index="index"
                                      :type="1"
                                      :is="ques.type"
                                      :question="ques"
                                      @set-answer="setModalAnswer"
                                      @set-question-head="updateQuestionHead"
                                    ></component>
                                  </transition>
                                </div>
                              </div>
                            </div>
                            <div class="questionHead head-bar row mb-5">
                              <div class="determine-ques">
                                <h6>??? ??????</h6>
                              </div>
                              <div class="col-md-5">
                                <v-select
                                  v-model="questionType"
                                  label="name"
                                  :options="questionTypeOptions"
                                ></v-select>
                              </div>
                              <div class="col-md-5">
                                <v-select
                                  v-model="questionLevel"
                                  label="name"
                                  :options="questionLevelOptions"
                                ></v-select>
                              </div>
                              <div class="fixed-icon">
                                <i
                                  style="
                                color: rgb(255, 255, 255);
                                font-size: 19px;
                                cursor: pointer;
                                background: #058ac6;
                                border-radius: 5px;
                              "
                                  @click="addNewQuestion()"
                                  class="addicon div-icon fas fa-plus"
                                ></i>
                              </div>
                            </div>
                            <div class="col-md-12">
                              <input
                                :disabled="selectedExam == null"
                                type="button"
                                @click="addAllQuestionsToExam"
                                value=" ????? ??????? ????????"
                                class="basth-btn-primary"
                              />
                            </div>
                          </div>
                        </vs-tab>
                        <vs-tab label="????? ????">
                          <div style="min-height: 200px;">
                            <div class="questionHead head-bar row mb-5">
                              <div class="determine-ques">
                                <h6>??? ??????</h6>
                              </div>
                              <div class="col-md-4">
                                <v-select
                                  v-model="questionSelectedType"
                                  @input="createQuestion"
                                  label="name"
                                  :options="questionTypeOptions"
                                ></v-select>
                              </div>
                              <div class="col-md-3" v-if="question">
                                <v-select
                                  @input="updateQuestionLevel"
                                  v-model="question.level"
                                  label="name"
                                  :options="questionLevelOptions"
                                ></v-select>
                              </div>
                              <div class="col-md-3" v-if="question">
                                <div class="form-group grade-num">
                                  <h6>?????? /</h6>
                                  <input type="number" v-model="question.point" />
                                </div>
                              </div>
                              <!-- <div class="fixed-icon">
                  <i
                    style="color: rgb(255, 255, 255);font-size: 19px;cursor: pointer;background: #058ac6;border-radius: 5px"
                    @click="createQuestion()"
                    class="addicon div-icon fas fa-plus"
                  ></i>
                              </div>-->
                            </div>
                            <!-- {{questions}} -->
                            <!-- <form action @submit.prevent> -->
                            <div class="general-exam-content" v-if="question">
                              <div class="row">
                                <div
                                  class="col-md-12"
                                  style="
                                min-height: 200px;
                                padding: 10px;
                                border: 1px dashed #d2d2d2;
                                margin-bottom: 30px;
                              "
                                >
                                  <div></div>
                                  <transition
                                    mode="out-in"
                                    enter-active-class="animate__animated animate__flipInX"
                                  >
                                    <component
                                      :index="1"
                                      :type="2"
                                      :is="question.type"
                                      :question="question"
                                      @set-answer="setModalAnswer"
                                      @set-image="setQuestionImage"
                                      @set-question-head="updateQuestionHead"
                                    ></component>
                                  </transition>
                                </div>

                                <div class="col-md-12">
                                  <input
                                    type="button"
                                    :disabled="question == null"
                                    @click="addNewQuestionWithImage"
                                    value="????? ??????"
                                    class="basth-btn-primary"
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </vs-tab>
                      </vs-tabs>
                    </div>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import Loading from "@/components/Loading";
import QuestionsBankCard from "@/components/questions-bank/QuestionsBankCard";
import ParagraphCard from "@/components/questions-bank/ParagraphCard";

import truefalse from "@/components/questions/TrueOrFalse";
import choose from "@/components/questions/ChooseQusestions";

export default {
  middleware: "auth-admin-or-teacher",
  components: {
    // ======== Add new question ===============
    truefalse,
    choose,

    // ======== End question  ===================
    Loading,
    QuestionsBankCard,
    ParagraphCard,
  },
  data() {
    return {
      // add new questions to exam
      page2:0,
      path: {
        subject: null,
        unit: null,
        lesson: null,
      },
      searchTrueFalse: "",
      searchChoose: "",
      questionLevel: "",
      questionLevelOptions: [
        { name: "???", value: "easy" },
        { name: "?????", value: "middle" },
        { name: "???", value: "difficult" },
      ],
      questionType: "",
      questionSelectedType: "",
      questionTypeOptions: [
        { name: "?? ? ???", value: "truefalse" },
        { name: "???????", value: "choose" },
      ],
      question: null,
      questions: [],

      // add new questions to exam
      lessonDetails: null,
      searchQuestion: "",
      selectedExam: null,
      selectedExam2: null,
      isLoading: true,
      isAdding: false,
      isSearching: false,
      exams: [],
      examQuestions: [],
      examQuestions2: [],

      selectedExamQuestions: [],
      selectedExamQuestions2: [],
      allQuestions: [],
      allQuestions2: [],
      tabIndex: 0,
      innerTabIndex: 1,
      totalpages: 0,
      currentQuestionPage: 1,
      totalpages2: 0,
      currentQuestionPage2: 1,
      filterType: { name: "?? ? ???", value: "truefalse" },
      filterType2: { name: "???????", value: "choose" },
    };
  },
  created() {
    if (this.$route.params.id) {
      this.getLessonDetails();
      this.getLessonExams();
    }
  },
  watch: {
    page2: function(val){
      console.log(val)

      this.$axios
        .get(
          `subjects/${this.selectedExam.unit.subject}/questions?page=${this.page2}
          &lesson=${this.selectedExam.lesson.id}&type=${this.filterType2.value}`
        )
        .then((res) => {
          // this.totalpages2 = res.data.totalPages;
          // this.page2 = res.data.pages;
          // this.allQuestions2 = [];
          // console.log("22", res);
          this.allQuestions2 = res.data.docs;
          // this.allQuestions2.map(function (val, key) {
          //   val.point = "";
          //   val.question.point = val.point;
          // });
        })
        .catch((err) => {
          console.log(err);
        });

    },
    selectedExam: function (newval, oldVal) {
      if (newval != oldVal) {
        this.getSelectedExamQuestions();
      }
      // alert(newval.id);
    },

    examQuestions: {
      handler: function (value) {
        let vm = this;
        // this.selectedExamQuestions = [];
        this.examQuestions.map(function (val, key) {
          vm.selectedExamQuestions.push({
            question: val.id,
            point: val.point,
          });
        });
      },
      deep: true,
    },
  },
  methods: {


    deleteSpecificQuestionTruefalse(question){
         console.log('delete this', question)

      // questions/16

      this.$snotify.confirm("?? ???? ???  ??????  ??????? ", " ?? ??? ?????", {
        showProgressBar: true,
        closeOnClick: true,
        pauseOnHover: true,
        buttons: [
          {
            text: "?????",
            action: (toast) => {
                    this.isLoading = true

              this.$snotify.remove(toast.id);
              this.$axios
                .delete(`questions/${question.id}`)
                .then((res) => {
                  console.log(res)
                  let questionIndexToDelete = this.allQuestions.findIndex(obj => obj.id == question.id)
                  this.allQuestions.splice(questionIndexToDelete, 1)
                    
                  this.$snotify.success(" ?? ????? ?????");
                })
                .catch((err) => {
                  this.$snotify.error("????? ??? ??? ??  ");
                }).finally(() => this.isLoading = false);
            },
          },
          {
            text: "?????",
            action: (toast) => {
              this.$snotify.remove(toast.id);
            },
          },
        ],
      });
    },

    deleteSpecificQuestionChoose(question){
        console.log('delete this', question)

      // questions/16

      this.$snotify.confirm("?? ???? ???  ??????  ??????? ", " ?? ??? ?????", {
        showProgressBar: true,
        closeOnClick: true,
        pauseOnHover: true,
        buttons: [
          {
            text: "?????",
            action: (toast) => {
                    this.isLoading = true

              this.$snotify.remove(toast.id);
              this.$axios
                .delete(`questions/${question.id}`)
                .then((res) => {
                  console.log(res)
                  let questionIndexToDelete = this.allQuestions2.findIndex(obj => obj.id == question.id)
                  this.allQuestions2.splice(questionIndexToDelete, 1)
                            
                  this.$snotify.success(" ?? ????? ?????");
                })
                .catch((err) => {
                  this.$snotify.error("????? ??? ??? ??  ");
                }).finally(() => this.isLoading = false);
            },
          },
          {
            text: "?????",
            action: (toast) => {
              this.$snotify.remove(toast.id);
            },
          },
        ],
      });
    },


       deleteSpecificQuestion(question){
      console.log('delete this', question)

      // questions/16

      this.$snotify.confirm("?? ???? ???  ??????  ??????? ", " ?? ??? ?????", {
        showProgressBar: true,
        closeOnClick: true,
        pauseOnHover: true,
        buttons: [
          {
            text: "?????",
            action: (toast) => {
                    this.isLoading = true

              this.$snotify.remove(toast.id);
              this.$axios
                .delete(`questions/${question.id}`)
                .then((res) => {
                  console.log(res)
                  let questionIndexToDelete = this.selectedExamQuestions.findIndex(obj => obj.id == question.id)
                  this.selectedExamQuestions.splice(questionIndexToDelete, 1)

                  this.$snotify.success(" ?? ????? ?????");
                })
                .catch((err) => {
                  this.$snotify.error("????? ??? ??? ??  ");
                }).finally(() => this.isLoading = false);
            },
          },
          {
            text: "?????",
            action: (toast) => {
              this.$snotify.remove(toast.id);
            },
          },
        ],
      });
    },


    updateQuestionHead(e) {
      //   console.log("data", e);
      if (e.type == 1) {
        this.questions[e.index].head = e.head;
      } else if (e.type == 3) {
        this.groupQuestion.head = e.head;
      } else if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].head = e.head;
      } else {
        this.question.head = e.head;
      }
    },
    setModalAnswer(e) {
      //   console.log("data", e);
      if (e.type == 1) {
        this.questions[e.index].modelAnswer = e.answer;
        if (e.answer.length > 0) {
          this.questions[e.index].numberOfInputs = e.answer.length;
        }
      } else if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].modelAnswer = e.answer;
      } else {
        this.question.modelAnswer = e.answer;
      }
    },
    getLessonDetails() {
      this.$axios
        .get(`lessons/${this.$route.params.id}`)
        .then((res) => {
          this.lessonDetails = res.data;
          this.path.lesson = res.data.id;
          this.path.lesson = res.data.id;
          this.path.unit = res.data.unit.id;
          this.path.subject = res.data.unit.subject.id;
        })
        .catch((err) => {
          console.log(err);
        });
    },
    addAllQuestionsToExam() {
      // questions-all
      this.$axios
        .post(`exams/${this.selectedExam.id}/questions-all`, this.questions)
        .then((res) => {
          this.tabIndex = 0;
          this.selectedExam = null;
          this.questions = [];
          this.$snotify.success(`?? ????? ???????  ???????? ?????`);

          // this.isLoading = false
          // this.$router.push({ path: '/subjects' })
        })
        .catch((err) => {
          this.$snotify.error(
            `?? ???? ???? ?? ????? ???? ??????? ????? ????????`
          );

          // this.isLoading = false
          console.log(err);
        });
    },
    addNewQuestionWithImage() {


      // Add questions using form data

      let questionForm = new FormData();
      questionForm.append("head", this.question.head);
      questionForm.append("modelAnswer", this.question.modelAnswer);
      questionForm.append("difficultyLevel", this.question.difficultyLevel);
      questionForm.append("subject", this.question.subject);
      questionForm.append("unit", this.question.unit);
      questionForm.append("lesson", this.question.lesson);
      questionForm.append("type", this.question.type);

      if (this.question.type == "complete") {
        questionForm.append("numberOfInputs", this.question.modelAnswer.length);
      }
      if (this.question.choices) {
        for (let index = 0; index < this.question.choices.length; index++) {
          questionForm.append("choices", this.question.choices[index]);
        }
        // questionForm.append("choices", this.question.choices);
      }

      if (this.question.image != null) {
        questionForm.append("image", this.question.image);
      }

      this.$axios
        .post(`questions`, questionForm, {
          headers: { "Content-Type": "multipart/form-data" },
        })
        .then((res) => {
          this.addOneQuestion(res.data.id);
          // console.log("one question", res.data);
        })
        .catch((err) => {
          console.log(err);
        });
    },

    addOneQuestion(question_id) {
      this.isLoading = true;
      this.$axios
        .post(`exams/${this.selectedExam.id}/questions`, [
          {
            question: question_id,
            point: this.question.point,
          },
        ])
        .then((res) => {
          this.$snotify.success(`?? ????? ??????  ?????`);
          this.question = null;
          this.selectedExam = null;
          this.tabIndex = 0;
        })
        .catch((err) => {
          console.log(err);
          this.$snotify.error(
            `?? ???? ???? ?? ????? ???? ??????? ????? ????????`
          );
        })
        .finally(() => (this.isLoading = false));
    },
    updateQuestionLevel() {
      this.question.difficultyLevel = this.question.level.value;
    },
    setQuestionImage(e) {
      // alert("d");
      // console.log("image", e.image);
      if (e.type == 4) {
        this.groupQuestion.subQuestions[e.index].image = e.image;
      } else if (e.type == 2) {
        if (this.question != null) {
          this.question.image = e.image;
        }
      } else {
        this.groupQuestion.image = e.image;
      }
    },
    createQuestion() {
      if (this.questionSelectedType == null) {
        this.question = null;
        return;
      }
      if (
        this.questionLevel.value != "" &&
        this.questionSelectedType.value != ""
      ) {
        // console.log(this.questionLevel.value);
        if (this.questionSelectedType.value == "truefalse") {
          this.question = {
            subject: this.path.subject,
            unit: this.path.unit,
            lesson: this.path.lesson,
            type: this.questionSelectedType.value,
            typeName: this.questionSelectedType.name,
            head: "",
            point: "",
            difficultyLevel: this.questionLevel.value,
            level: this.questionLevel,
            modelAnswer: "",
            image: null,
          };
        } else if (this.questionSelectedType.value == "choose") {
          this.question = {
            subject: this.path.subject,
            unit: this.path.unit,
            lesson: this.path.lesson,
            type: this.questionSelectedType.value,
            typeName: this.questionSelectedType.name,
            head: "",
            point: "",
            difficultyLevel: this.questionLevel.value,
            level: this.questionLevel,
            modelAnswer: 0,
            choices: ["", "", "", ""],
            image: null,
          };
        }
      }
    },
    addNewQuestion() {
      if (this.questionLevel.value != "" && this.questionType.value != "") {
        // console.log(this.questionLevel.value);
        if (this.questionType.value == "truefalse") {
          this.questions.push({
            subject: this.path.subject,
            unit: this.path.unit,
            lesson: this.path.lesson,
            type: this.questionType.value,
            typeName: this.questionType.name,
            head: "",
            point: "",
            difficultyLevel: this.questionLevel.value,
            level: this.questionLevel,
            modelAnswer: "",
          });
        } else if (this.questionType.value == "choose") {
          this.questions.push({
            subject: this.path.subject,
            unit: this.path.unit,
            lesson: this.path.lesson,
            type: this.questionType.value,
            typeName: this.questionType.name,
            head: "",
            point: "",
            difficultyLevel: this.questionLevel.value,
            level: this.questionLevel,
            modelAnswer: 0,
            choices: ["", "", "", ""],
          });
        }
      }
    },
    addQuestionsToExam() {
      // exams/70/questions
      this.isLoading = true;
      if (this.selectedExam != null) {
        this.isAdding = true;
        let selectedQuestions = [];
        this.examQuestions.map(function (val, key) {
          selectedQuestions.push({
            question: val.id,
            point: val.point,
          });
        });

        console.log("selectedQuestions", selectedQuestions);
        this.$axios
          .post(`exams/${this.selectedExam.id}/questions`, selectedQuestions)
          .then((res) => {
            this.isAdding = false;
            this.selectedExam = null;
            this.selectedExamQuestions = [];

            this.examQuestions = [];
            this.tabIndex = 0;

            this.$snotify.success(`?? ????? ???????  ???????? ?????`);
          })
          .catch((err) => {
            this.isAdding = false;
            this.$snotify.error(`??? ??? ?? ?? ????? ??? ?????? ??????`);
            console.log(err);
          }).finally(() => this.isLoading = false);
      } else {
        this.$snotify.error(`?? ???? ??? ???????? ????`);
      }
    },
    removeExamQuestion(id) {
      let quesIndex = this.examQuestions.findIndex((elem) => {
        return elem.id == id;
      });
      if (quesIndex > -1) {
        this.examQuestions.splice(quesIndex, 1);
      }
    },
    updatePoint(e) {
      console.log("tag", e);
      this.examQuestionsEdit = e;
      if (this.selectedExamQuestions.length > 0) {
        let quesIndex = this.selectedExamQuestions.findIndex((elem) => {
          return elem.question == e.id;
        });
        if (quesIndex > -1) {
          this.selectedExamQuestions[quesIndex].point = e.point;
          console.log(this.selectedExamQuestions[quesIndex].point);
        }
      }
    },
    checkExist(question) {
      let quesIndex = this.examQuestions.findIndex((elem) => {
        return elem.id == question.id;
      });
      if (quesIndex > -1) {
        return true;
      } else {
        return false;
      }
    },
    addQuestions(question) {
      console.log("ques", question.addedBy.username);
      if (this.selectedExam != null) {
        let quesInExamIndex = this.selectedExamQuestions.findIndex((elem) => {
          return elem.id == question.id;
        });
        if (quesInExamIndex > -1) {
          this.$snotify.error(`???? ??? ?????? ????? ?????? `);
        } else {
          let quesIndex = this.examQuestions.findIndex((elem) => {
            return elem.id == question.id;
          });
          if (quesIndex > -1) {
            this.examQuestions.splice(quesIndex, 1);
          } else {
            this.examQuestions.push(question);
          }
        }
      } else {
        this.$snotify.error(`?? ???? ??? ???????? ????`);
      }
    },

    getLessonQuestions() {
      this.$axios
        .get(
          `subjects/${this.selectedExam.unit.subject}/questions?page=${this.currentQuestionPage}
          &lesson=${this.selectedExam.lesson.id}&type=${this.filterType.value}`
        )
        .then((res) => {
          this.totalpages = res.data.totalPages;
          this.allQuestions = [];
          console.log(res);
          this.allQuestions = res.data.docs;
          this.allQuestions.map(function (val, key) {
            val.point = "";
            val.question.point = val.point;
          });
        })
        .catch((err) => {
          console.log(err);
        });
    },
    filterLessonTrueFasleQuestions() {
      this.isSearching = true;
      this.$axios
        .get(
          `subjects/${this.selectedExam.unit.subject}/questions?page=${this.currentQuestionPage}
          &lesson=${this.selectedExam.lesson.id}&type=${this.filterType.value}&head=${this.searchTrueFalse}`
        )
        .then((res) => {
          this.totalpages = res.data.totalPages;
          this.allQuestions = [];
          console.log(res);
          this.allQuestions = res.data.docs;
          this.allQuestions.map(function (val, key) {
            val.point = "";
            val.question.point = val.point;
          });
        })
        .catch((err) => {
          console.log(err);
        })
        .finally(() => (this.isSearching = false));
    },
    getLessonChooseQuestions() {
      this.$axios
        .get(
          `subjects/${this.selectedExam.unit.subject}/questions?page=${this.currentQuestionPage2}
          &lesson=${this.selectedExam.lesson.id}&type=${this.filterType2.value}`
        )
        .then((res) => {
          this.totalpages2 = res.data.totalPages;
          this.page2 = res.data.pages;
          this.allQuestions2 = [];
          console.log("22", res);
          this.allQuestions2 = res.data.docs;
          this.allQuestions2.map(function (val, key) {
            val.point = "";
            val.question.point = val.point;
          });
        })
        .catch((err) => {
          console.log(err);
        });
    },
    filterLessonChooseQuestions() {
      this.isSearching = true;
      this.$axios
        .get(
          `subjects/${this.selectedExam.unit.subject}/questions?page=${this.currentQuestionPage2}
          &lesson=${this.selectedExam.lesson.id}&type=${this.filterType2.value}&head=${this.searchChoose}`
        )
        .then((res) => {
          this.totalpages2 = res.data.totalPages;
          this.page2 = res.data.pages;
          this.allQuestions2 = [];
          console.log("22", res);
          this.allQuestions2 = res.data.docs;
          this.allQuestions2.map(function (val, key) {
            val.point = "";
            val.question.point = val.point;
          });
        })
        .catch((err) => {
          console.log(err);
        })
        .finally(() => (this.isSearching = false));
    },

    getLessonExams() {
      this.$axios
        .get(`lessons/${this.$route.params.id}/exams`)
        .then((res) => {
          this.exams = res.data;
        })
        .catch((err) => {
          console.log(err);
        })
        .finally(() => (this.isLoading = false));
    },
    getSelectedExamQuestions() {
      if (this.selectedExam != null) {
        this.isLoading = true;
        this.$axios
          .get(`exams/${this.selectedExam.id}`)
          .then((res) => {
            this.getLessonQuestions();
            this.getLessonChooseQuestions();
            this.selectedExamQuestions = [];
            res.data.questions.map((obj) => {
              obj.question.point = "";
              obj.question.point = obj.point;
              //   console.log(obj.question);
              this.selectedExamQuestions.push(obj.question);
            });
          })
          .catch((err) => {
            console.log(err);
          })
          .finally(() => (this.isLoading = false));
      }
    },

    // getSelectedExamQuestions() {
    //   if (this.selectedExam != null) {
    //     this.isLoading = true;
    //     this.$axios
    //       .get(`exams/${this.selectedExam.id}`)
    //       .then((res) => {
    //         this.getLessonQuestions();
    //         res.data.questions.map((obj) => {
    //           obj.question.point = "";
    //           obj.question.point = obj.point;
    //           //   console.log(obj.question);
    //           this.selectedExamQuestions.push(obj.question);
    //         });
    //       })
    //       .catch((err) => {
    //         console.log(err);
    //       })
    //       .finally(() => (this.isLoading = false));
    //   }
    // },
  },

  // lessons/16/exams
};
</script>

<style lang="scss">
.tests-level {
  .selectedExamQuestions {
    width: 100%;
  }
  .question-bank-card {
    position: relative;
    margin: 10px;
    border: 2px dashed #d2d2d2;
    padding: 10px;
    margin-bottom: 15px;
    .solve-img {
      position: absolute;
      bottom: 0;
      left: 7px;
    }
    h6 {
      font-family: "CustomFontRegular";
    }
    h5 {
      font-size: 14px;
      font-weight: bolder;
      color: #058ac6;
      font-family: "CustomFontBold";
    }
    h5,
    h6 {
      display: inline-block;
    }
  }
  .question-bank-card {
    div {
      .operations-buttons {
        margin-bottom: 10px;
        input {
          padding: 6px 8px;
          box-shadow: 0px 1px 10px 1px #ddd;
          border: 0;
          border-radius: 4px;
          margin-bottom: 21px;
          margin-top: 0;
          width: 173px;
          margin-bottom: 0;
        }
        button {
          font-family: "CustomFontRegular";
        }
      }
      .question-name {
        border: 1px solid #ccc;
        padding: 7px 12px 0;
        background: #f5f5f5;
        margin-bottom: 11px;
      }
      .another-button {
        margin-top: 76px;
        text-align: left;
        button {
          border: none;
          padding: 4px 15px;
          font-family: "CustomFontRegular";
        }
      }
    }
  }
  margin-top: 30px;
  .title {
    h3 {
      color: rgba(5, 138, 198, 0.74118);
      margin-bottom: 10px;
      font-family: "CustomFontMedium";
    }
  }
  .lesson-inner-grid {
    .unit {
      box-shadow: none;
      display: inline-block;
    }
    .subject-name {
      padding: 36px 0;
      display: inline-block;
    }
  }
  .levels {
    .level-item {
      padding: 10px;
      text-align: center;
      min-height: 249px;
      transition: all 0.4s linear;
      margin-bottom: 20px;
      margin-top: 30px;
      cursor: pointer;
      h6 {
        text-align: center;
        margin-top: 31px;
        font-size: 19px;
        color: #6e6e6e;
      }
      &:hover {
        transform: scale(1.03);
        box-shadow: 0px 1px 8px 5px #ddd;
      }
    }
    .level-cicle {
      background-color: green;
      border-radius: 50%;
      width: 80px;
      height: 80px;
      position: relative;
      z-index: -1;
      .inner-level-cicle {
        position: absolute;
        top: 5px;
        left: 5px;
        content: "";
        background-color: #fff;
      }
    }
  }
}

// Extra small devices (portrait phones, less than 576px)
@media (max-width: 575.98px) {
  .tests-level {
    padding-top: 60px;
  }
}

// Small devices (landscape phones, 576px and up)
@media (min-width: 576px) and (max-width: 767.98px) {
  .tests-level {
    padding-top: 60px;
  }
}

// Medium devices (tablets, 768px and up)
@media (min-width: 768px) and (max-width: 991.98px) {
}

// Large devices (desktops, 992px and up)
@media (min-width: 992px) and (max-width: 1199.98px) {
}

// Extra large devices (large desktops, 1200px and up)
@media (min-width: 1200px) {
}
// @import "../../../assets/sass/general-exam-level.scss";
</style>
